{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","idx","prototype","id","PropTypes","number","isRequired","string","arrayOf","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAIA,SAASA,EAAT,GAAyD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC3C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAOH,EAAQI,IAAKN,EAAOA,MAASA,IAEzC,sBAAKI,UAAU,cAAf,UAGI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SAA+BD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAgB,oBAAcL,UAAU,gBAAxB,SAAyCI,GAAhCC,QACnE,mBAAGL,UAAU,iBAAb,SAA+BH,UAU/CH,EAAMY,UAAY,CACdC,GAAIC,IAAUC,OAAOC,WACrBf,KAAMa,IAAUC,OAAOC,WACvBd,MAAOY,IAAUG,OAAOD,WACxBb,QAASW,IAAUG,OAAOD,WAC1BZ,OAAQU,IAAUG,OAAOD,WACzBX,OAAQS,IAAUI,QAAQJ,IAAUG,QAAQD,YAGjChB,QC0BAmB,E,4MAnDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAKVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAMZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IATzB,2C,8FAYZ,sBAAAG,EAAA,sDACEK,KAAKN,YADP,gD,0EAGA,WACE,MAA8BM,KAAKT,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACE,yBAAShB,UAAU,YAAnB,SAEKe,EACG,qBAAKf,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAEF,qBAAKA,UAAU,SAAf,SACCgB,EAAOb,KAAI,SAACqB,GAAD,OACV,cAAC,EAAD,CAEEjB,GAAIiB,EAAMjB,GACVZ,KAAM6B,EAAM7B,KACZC,MAAO4B,EAAM5B,MACbC,QAAS2B,EAAM3B,QACfC,OAAQ0B,EAAMC,mBACd1B,OAAQyB,EAAMzB,QANTyB,EAAMjB,e,GAnCXmB,IAAMC,WCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.746e2b06.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css'\n\nfunction Movie({ year, title, summary, poster, genres }){\n    return (\n        <div className=\"movie\">\n            <img src = {poster} alt={title} title = {title}></img>\n\n            <div className=\"movie__data\">\n                {/* 리액트에서 css스타일을 바로 먹이는 방법중 하나-> style={{ sth you want to write}} */}\n                {/* <h3 className=\"movie__title\" style={{ backgroundColor: \"beige\"}}>{title}</h3> */}\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <ul className=\"movie__genres\">{genres.map((genre, idx) => <li key={idx} className=\"genres__genre\">{genre}</li>)}</ul>\n                <p className=\"movie__summary\">{summary}</p>\n                \n            </div>\n\n\n        </div>\n\n    )\n}\n\nMovie.prototype = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie'\nimport './App.css';\n\n\n\n//React component에서 특성들을 다 들고 오는것\u001f\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  //axios와 같이 데이터를 받아오는 것에는 시간이 걸리기 때문에 비동기 함수라고 선언을 해주고,\n  //그럼 무엇을 기다리느냐?? 기다릴 대상인 axios앞에 await적어주기.\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    //this.setState({movies: movies}) 라고 할려고 했지만, 아래처럼 하면 바로 해결이 된다...\n    this.setState({ movies, isLoading: false });\n  };\n\n  async componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        \n          {isLoading\n            ? <div className=\"loader\">\n                <span className=\"loader__text\">Loading...</span>\n              </div>\n            : <div className=\"movies\">\n              {movies.map((movie) => (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                />\n              ))}\n            </div>\n              }\n        \n      </section>\n    );\n  }\n}\n\nexport default App;\n//   constructor(props){\n//     super(props);\n//     console.log(\"constructor\")\n//   }\n\n//   state = {\n//     count: 0\n//   }\n//   add = (num) => {\n//     //this.setState({count: this.state.count-1})이라고 한다면, state에 의존하기 때문에\n//     //아래와 같이 current를 사용하는것이 best practice\n//     this.setState(cur => ({count: cur.count+1}))\n//   }\n\n//   minus = (num) => {\n//     this.setState(cur => ({count: cur.count-1}))\n//   }\n\n//   componentDidMount(){\n//     console.log(\"component didMount\")\n//   }\n\n//   componentDidUpdate(){\n//     console.log(\"I updated\")\n//   }\n//   //React의 class컴포넌트는 automatically render method를 자동적으로 실행한다!!\n//   render(){\n//     console.log(\"render\")\n//     return (\n//       <div>\n//         <h1>The Number is {this.state.count}</h1>\n//         <button onClick={() => this.add()}>click to Plus</button>\n//         <button onClick={() => this.minus()}>click to Minus</button>\n//       </div>\n//     )}\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}